// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.2
// source: anomaly.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AnomalyDetectionClient is the client API for AnomalyDetection service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AnomalyDetectionClient interface {
	Predict(ctx context.Context, in *AnomalyRequest, opts ...grpc.CallOption) (*AnomalyResponse, error)
	Train(ctx context.Context, in *ModelTrainRequest, opts ...grpc.CallOption) (*ModelTrainResponse, error)
}

type anomalyDetectionClient struct {
	cc grpc.ClientConnInterface
}

func NewAnomalyDetectionClient(cc grpc.ClientConnInterface) AnomalyDetectionClient {
	return &anomalyDetectionClient{cc}
}

func (c *anomalyDetectionClient) Predict(ctx context.Context, in *AnomalyRequest, opts ...grpc.CallOption) (*AnomalyResponse, error) {
	out := new(AnomalyResponse)
	err := c.cc.Invoke(ctx, "/pb.AnomalyDetection/Predict", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *anomalyDetectionClient) Train(ctx context.Context, in *ModelTrainRequest, opts ...grpc.CallOption) (*ModelTrainResponse, error) {
	out := new(ModelTrainResponse)
	err := c.cc.Invoke(ctx, "/pb.AnomalyDetection/Train", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AnomalyDetectionServer is the server API for AnomalyDetection service.
// All implementations must embed UnimplementedAnomalyDetectionServer
// for forward compatibility
type AnomalyDetectionServer interface {
	Predict(context.Context, *AnomalyRequest) (*AnomalyResponse, error)
	Train(context.Context, *ModelTrainRequest) (*ModelTrainResponse, error)
	mustEmbedUnimplementedAnomalyDetectionServer()
}

// UnimplementedAnomalyDetectionServer must be embedded to have forward compatible implementations.
type UnimplementedAnomalyDetectionServer struct {
}

func (UnimplementedAnomalyDetectionServer) Predict(context.Context, *AnomalyRequest) (*AnomalyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Predict not implemented")
}
func (UnimplementedAnomalyDetectionServer) Train(context.Context, *ModelTrainRequest) (*ModelTrainResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Train not implemented")
}
func (UnimplementedAnomalyDetectionServer) mustEmbedUnimplementedAnomalyDetectionServer() {}

// UnsafeAnomalyDetectionServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AnomalyDetectionServer will
// result in compilation errors.
type UnsafeAnomalyDetectionServer interface {
	mustEmbedUnimplementedAnomalyDetectionServer()
}

func RegisterAnomalyDetectionServer(s grpc.ServiceRegistrar, srv AnomalyDetectionServer) {
	s.RegisterService(&AnomalyDetection_ServiceDesc, srv)
}

func _AnomalyDetection_Predict_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AnomalyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnomalyDetectionServer).Predict(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.AnomalyDetection/Predict",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnomalyDetectionServer).Predict(ctx, req.(*AnomalyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AnomalyDetection_Train_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ModelTrainRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnomalyDetectionServer).Train(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.AnomalyDetection/Train",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnomalyDetectionServer).Train(ctx, req.(*ModelTrainRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AnomalyDetection_ServiceDesc is the grpc.ServiceDesc for AnomalyDetection service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AnomalyDetection_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.AnomalyDetection",
	HandlerType: (*AnomalyDetectionServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Predict",
			Handler:    _AnomalyDetection_Predict_Handler,
		},
		{
			MethodName: "Train",
			Handler:    _AnomalyDetection_Train_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "anomaly.proto",
}
